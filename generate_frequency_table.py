#!/bin/python3
# Copyright (C) 2021 Dmitriy Nekrasov
#
# This work is free. You can redistribute it and/or modify it under the
# terms of the Do What The Fuck You Want To Public License, Version 2,
# as published by Sam Hocevar. See the COPYING file or http://www.wtfpl.net/
# for more details.
#
# This script generates memory initialization file with lookup table
# freq number --> probability of the cotrol sawtooth increment per audio sample
# The reason is that we want ftrequency to change linear when we turn
# potentiometeir, from f0 to f255.
#

# Magic number from cordic design. Cordic angle range is 0-90 degrees. And value
# of 402 is corresponding to 90 degrees (it's just scaled this way, no big reason).
# We must range from 0 to 90 not including 90 because it causes overflow. So the N
# is the length of the sawtooth repititative part if we increment counter every
# sample tick.
N = 401
RESOLUTION = 2**16

# Highest frequency, pot is in the leftmost position
f0 = 11025 / 401
# Lowest frequency, pot is in the rightmost position
f256 = 1.0

bit_probability = [0]*256
bit_probability[0] = RESOLUTION

for i in range(1,256):
  # local frequency
  f = f0 + (f256 - f0)*(1.0*i / 256)
  # local frequency calculated as a sawtooth signal phase increment probability
  # (per sound sample)
  bit_probability[i] = round(RESOLUTION*f*N / 11025.0 )

MIF_HEADER = \
"-- This file is automatically generated by generate_frequency_table.py program\n\
-- Number of steps : 256\n\
-- Highest frequency : %f Hz\n\
-- Lowest frequency : %f Hz\n\
\n\
\nWIDTH=17;\
\nDEPTH=256;\
\nADDERSS_RADIX=HEX;\
\nDATA_RADIX=HEX;\
\n\n" % ( f0, f256 )


def create_rom_image( fname, y ):
  f = open( fname, "w" )
  f.write("%s" % MIF_HEADER)
  f.write("CONTENT BEGIN\n")
  for i in range( len( y ) ):
    wstr = "{:05x}".format(i) + "    :    " + "{:05x}".format(y[i]) + ";"
    f.write("%s\n" % wstr)
  f.write("END;\n")
  f.close()

create_rom_image( "tremolo_frequency_table.mif", bit_probability )

